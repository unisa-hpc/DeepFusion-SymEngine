Only in workdir/symengine-0.10.1: build
Only in workdir/symengine-0.10.1: cmake-build-debug
Only in workdir/symengine-0.10.1: cmake-build-release
Only in workdir/symengine-0.10.1: cmake-build-relwithdebinfo
Only in workdir/symengine-0.10.1: .idea
diff -ur workdir/symengine-0.10.1-patched/symengine/basic.h workdir/symengine-0.10.1/symengine/basic.h
--- workdir/symengine-0.10.1-patched/symengine/basic.h	2023-03-23 16:41:51.000000000 +0000
+++ workdir/symengine-0.10.1/symengine/basic.h	2024-01-08 15:52:16.164348231 +0000
@@ -282,7 +282,7 @@
 // Common subexpression elimination of symbolic expressions
 // Return a vector of replacement pairs and a vector of reduced exprs
 void cse(vec_pair &replacements, vec_basic &reduced_exprs,
-         const vec_basic &exprs);
+         const vec_basic &exprs, const std::function<RCP<const Basic>()> &next_symbol_gen= nullptr);
 
 /*! This `<<` overloaded function simply calls `p.__str__`, so it allows any
    Basic
diff -ur workdir/symengine-0.10.1-patched/symengine/cse.cpp workdir/symengine-0.10.1/symengine/cse.cpp
--- workdir/symengine-0.10.1-patched/symengine/cse.cpp	2023-03-23 16:41:51.000000000 +0000
+++ workdir/symengine-0.10.1/symengine/cse.cpp	2024-01-08 15:52:16.167681563 +0000
@@ -5,12 +5,14 @@
 #include <symengine/visitor.h>
 
 #include <queue>
+#include <functional>
 
 namespace SymEngine
 {
 umap_basic_basic opt_cse(const vec_basic &exprs);
 void tree_cse(vec_pair &replacements, vec_basic &reduced_exprs,
-              const vec_basic &exprs, umap_basic_basic &opt_subs);
+              const vec_basic &exprs, umap_basic_basic &opt_subs,
+              const std::function<RCP<const Basic>()> &next_symbol_gen);
 
 class FuncArgTracker
 {
@@ -426,15 +428,18 @@
     set_basic &excluded_symbols;
     vec_pair &replacements;
     unsigned next_symbol_index = 0;
+    const std::function<RCP<const Basic>()> next_symbol_gen;
 
 public:
     using TransformVisitor::bvisit;
     using TransformVisitor::result_;
     RebuildVisitor(umap_basic_basic &subs_, umap_basic_basic &opt_subs_,
                    set_basic &to_eliminate_, set_basic &excluded_symbols_,
-                   vec_pair &replacements_)
+                   vec_pair &replacements_,
+                   const std::function<RCP<const Basic>()> &next_symbol_gen)
         : subs(subs_), opt_subs(opt_subs_), to_eliminate(to_eliminate_),
-          excluded_symbols(excluded_symbols_), replacements(replacements_)
+          excluded_symbols(excluded_symbols_), replacements(replacements_),
+          next_symbol_gen(next_symbol_gen)
     {
     }
     RCP<const Basic> apply(const RCP<const Basic> &orig_expr) override
@@ -465,12 +470,17 @@
     }
     RCP<const Basic> next_symbol()
     {
-        RCP<const Basic> sym = symbol("x" + to_string(next_symbol_index));
-        next_symbol_index++;
-        if (excluded_symbols.find(sym) == excluded_symbols.end()) {
-            return sym;
+        if (next_symbol_gen== nullptr) {
+            RCP<const Symbol> sym = symbol("x" + to_string(next_symbol_index));
+            sym->set_link_flag(true);
+            next_symbol_index++;
+            if (excluded_symbols.find(sym) == excluded_symbols.end()) {
+                return sym;
+            } else {
+                return next_symbol();
+            }
         } else {
-            return next_symbol();
+            return next_symbol_gen();
         }
     };
     void bvisit(const FunctionSymbol &x)
@@ -493,7 +503,8 @@
 };
 
 void tree_cse(vec_pair &replacements, vec_basic &reduced_exprs,
-              const vec_basic &exprs, umap_basic_basic &opt_subs)
+              const vec_basic &exprs, umap_basic_basic &opt_subs,
+              const std::function<RCP<const Basic>()> &next_symbol_gen)
 {
     set_basic to_eliminate;
     set_basic seen_subexp;
@@ -536,7 +547,8 @@
     umap_basic_basic subs;
 
     RebuildVisitor rebuild_visitor(subs, opt_subs, to_eliminate,
-                                   excluded_symbols, replacements);
+                                   excluded_symbols, replacements,
+                                   next_symbol_gen);
 
     for (auto &e : exprs) {
         auto reduced_e = rebuild_visitor.apply(e);
@@ -545,12 +557,14 @@
 }
 
 void cse(vec_pair &replacements, vec_basic &reduced_exprs,
-         const vec_basic &exprs)
+         const vec_basic &exprs,
+         const std::function<RCP<const Basic>()> &next_symbol_gen)
 {
     // Find other optimization opportunities.
     umap_basic_basic opt_subs = opt_cse(exprs);
 
     // Main CSE algorithm.
-    tree_cse(replacements, reduced_exprs, exprs, opt_subs);
+    tree_cse(replacements, reduced_exprs, exprs, opt_subs, next_symbol_gen);
 }
+
 } // namespace SymEngine
diff -ur workdir/symengine-0.10.1-patched/symengine/serialize-cereal.h workdir/symengine-0.10.1/symengine/serialize-cereal.h
--- workdir/symengine-0.10.1-patched/symengine/serialize-cereal.h	2023-03-23 16:41:51.000000000 +0000
+++ workdir/symengine-0.10.1/symengine/serialize-cereal.h	2024-01-24 15:17:08.556925851 +0000
@@ -41,7 +41,7 @@
 template <class Archive>
 inline void save_basic(Archive &ar, const Symbol &b)
 {
-    ar(b.__str__());
+    ar(b.__str__(), b.is_link(), b.get_local_symbol_index());
 }
 template <class Archive>
 inline void save_basic(Archive &ar, const Mul &b)
@@ -333,8 +333,13 @@
 RCP<const Basic> load_basic(Archive &ar, RCP<const Symbol> &)
 {
     std::string name;
-    ar(name);
-    return symbol(name);
+    bool isLink;
+    size_t localSymbolIndex;
+    ar(name, isLink, localSymbolIndex);
+    auto s = symbol(name);
+    s->set_link_flag(isLink);
+    s->set_local_symbol_index(localSymbolIndex);
+    return s;
 }
 template <class Archive>
 RCP<const Basic> load_basic(Archive &ar, RCP<const Mul> &)
diff -ur workdir/symengine-0.10.1-patched/symengine/symbol.cpp workdir/symengine-0.10.1/symengine/symbol.cpp
--- workdir/symengine-0.10.1-patched/symengine/symbol.cpp	2023-03-23 16:41:51.000000000 +0000
+++ workdir/symengine-0.10.1/symengine/symbol.cpp	2024-01-24 15:17:08.513592518 +0000
@@ -3,6 +3,22 @@
 
 namespace SymEngine
 {
+//! DeepFusion Patch:
+bool Symbol::is_link() const{
+    return isLink;
+}
+
+void Symbol::set_link_flag(bool flag) const{
+    isLink = flag;
+}
+
+size_t Symbol::get_local_symbol_index() const{
+    return localSymbolIndex;
+}
+
+void Symbol::set_local_symbol_index(size_t index) const {
+    localSymbolIndex = index;
+}
 
 Symbol::Symbol(const std::string &name)
     : name_{name} {SYMENGINE_ASSIGN_TYPEID()}
diff -ur workdir/symengine-0.10.1-patched/symengine/symbol.h workdir/symengine-0.10.1/symengine/symbol.h
--- workdir/symengine-0.10.1-patched/symengine/symbol.h	2023-03-23 16:41:51.000000000 +0000
+++ workdir/symengine-0.10.1/symengine/symbol.h	2024-01-24 15:17:08.596925851 +0000
@@ -17,8 +17,19 @@
     //! name of Symbol
     std::string name_;
 
+    //! DeepFusion Patch:
+    mutable bool isLink=false;
+    mutable size_t localSymbolIndex=0;
+
 public:
     IMPLEMENT_TYPEID(SYMENGINE_SYMBOL)
+
+    //! DeepFusion Patch:
+    bool is_link() const;
+    void set_link_flag(bool flag) const;
+    size_t get_local_symbol_index() const;
+    void set_local_symbol_index(size_t index) const;
+
     //! Symbol Constructor
     explicit Symbol(const std::string &name);
     //! \return Size of the hash
