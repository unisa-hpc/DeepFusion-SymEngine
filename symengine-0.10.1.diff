Only in workdir/symengine-0.10.1: build
diff -ur workdir/symengine-0.10.1-patched/symengine/cse.cpp workdir/symengine-0.10.1/symengine/cse.cpp
--- workdir/symengine-0.10.1-patched/symengine/cse.cpp	2023-03-23 20:11:51.000000000 +0330
+++ workdir/symengine-0.10.1/symengine/cse.cpp	2023-05-22 18:46:35.347072213 +0330
@@ -465,7 +465,8 @@
     }
     RCP<const Basic> next_symbol()
     {
-        RCP<const Basic> sym = symbol("x" + to_string(next_symbol_index));
+        RCP<const Symbol> sym = symbol("x" + to_string(next_symbol_index));
+        sym->set_link_flag(true);
         next_symbol_index++;
         if (excluded_symbols.find(sym) == excluded_symbols.end()) {
             return sym;
diff -ur workdir/symengine-0.10.1-patched/symengine/serialize-cereal.h workdir/symengine-0.10.1/symengine/serialize-cereal.h
--- workdir/symengine-0.10.1-patched/symengine/serialize-cereal.h	2023-03-23 20:11:51.000000000 +0330
+++ workdir/symengine-0.10.1/symengine/serialize-cereal.h	2023-05-22 18:04:13.829272387 +0330
@@ -41,7 +41,7 @@
 template <class Archive>
 inline void save_basic(Archive &ar, const Symbol &b)
 {
-    ar(b.__str__());
+    ar(b.__str__(), b.is_link());
 }
 template <class Archive>
 inline void save_basic(Archive &ar, const Mul &b)
@@ -333,8 +333,11 @@
 RCP<const Basic> load_basic(Archive &ar, RCP<const Symbol> &)
 {
     std::string name;
-    ar(name);
-    return symbol(name);
+    bool isLink;
+    ar(name, isLink);
+    auto s = symbol(name);
+    s->set_link_flag(isLink);
+    return s;
 }
 template <class Archive>
 RCP<const Basic> load_basic(Archive &ar, RCP<const Mul> &)
diff -ur workdir/symengine-0.10.1-patched/symengine/symbol.cpp workdir/symengine-0.10.1/symengine/symbol.cpp
--- workdir/symengine-0.10.1-patched/symengine/symbol.cpp	2023-03-23 20:11:51.000000000 +0330
+++ workdir/symengine-0.10.1/symengine/symbol.cpp	2023-05-22 18:04:13.829272387 +0330
@@ -3,6 +3,14 @@
 
 namespace SymEngine
 {
+//! DeepFusion Patch:
+bool Symbol::is_link() const{
+    return isLink;
+}
+
+void Symbol::set_link_flag(bool flag) const{
+    isLink = flag;
+}
 
 Symbol::Symbol(const std::string &name)
     : name_{name} {SYMENGINE_ASSIGN_TYPEID()}
diff -ur workdir/symengine-0.10.1-patched/symengine/symbol.h workdir/symengine-0.10.1/symengine/symbol.h
--- workdir/symengine-0.10.1-patched/symengine/symbol.h	2023-03-23 20:11:51.000000000 +0330
+++ workdir/symengine-0.10.1/symengine/symbol.h	2023-05-22 18:04:13.829272387 +0330
@@ -17,8 +17,16 @@
     //! name of Symbol
     std::string name_;
 
+    //! DeepFusion Patch:
+    mutable bool isLink=false;
+
 public:
     IMPLEMENT_TYPEID(SYMENGINE_SYMBOL)
+
+    //! DeepFusion Patch:
+    bool is_link() const;
+    void set_link_flag(bool flag) const;
+
     //! Symbol Constructor
     explicit Symbol(const std::string &name);
     //! \return Size of the hash
